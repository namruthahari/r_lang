q()
setwd("E:/R/VAC")
View(dataset)
dataset=read.csv('Social_Network_Ads.csv')
View(dataset)
dataset=dataset[3:5]
dataset=read.csv('Social_Network_Ads.csv')
install.packages("ISLR")
install.packages("tree")
library(ISLR)
library(tree)
View(dataset)
dataset=dataset[3:5]
#encoding the target feature as factor
datset$Purchased=factor(dataset$Purchased, levels=c(0,1))
#encoding the target feature as factor
dataset$Purchased=factor(dataset$Purchased, levels=c(0,1))
str(dataset)
str(dataset)
str(dataset)
#encoding the target feature as factor
dataset$Purchased=factor(dataset$Purchased, levels=c(0,1))
install.packages('caTools')
librabry(caTools)
library(caTools)
set.seed(123)
split=sample.split(dataset$purchased, SplitRatio=0.8)
split=sample.split(dataset$Purchased, SplitRatio=0.8)
test_set=subset(dataset, split==FALSE)
training_set=subset(dataset, split==TRUE)
View(set)
View(dataset)
View(split)
View(training_set)
#feature scaling
training_set[-3]=scale(training_set[-3])
View(training_set)
test_set[-3]=scale(test_set[-3])
View(test_set)
install.packages(rpart)
install.packages('rpart')
library(rpart)
classifier=rpart(formula=Purchased ~., data=training_set)
#predicting the test set results
y_pred=predict(classifier, new data=test_set[-3], type='class')
#predicting the test set results
y_pred = predict(classifier, newdata = test_set[-3], type='class')
cm = table(test_set[,3], y_pred)
View(cm)
y_pred1 = predict(classifier, newdata = test_set, type='class')
View(y_pred)
View(y_pred1)
plot(classifier)
text(classifier)
